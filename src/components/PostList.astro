---
import { truncateText } from '../utils/textUtils';

export interface Props {
    items: Array<{
        url: string;
        title: string;
        date: string;
        thumbnail?: string | null;
        excerpt?: string;
        type?: 'blog' | 'works';
    }>;
    type: 'blog' | 'works' | 'mixed';
}

const { items, type } = Astro.props;
---

<div id="post-list-container">
    <ul class="contents" id="post-list">
        {items.map((item) => (
            <li class={type === 'mixed' && item.type ? item.type : type}>
                <a href={item.url} class="head-btn">
                    <span class="link-text">
                        {item.title}
                    </span>
                </a>
                <span class="date">{item.date}</span>
                {item.thumbnail && (
                    <a href={item.url}>
                        <img src={item.thumbnail} alt={item.title + 'のサムネイル'} class="thumbnail" />
                    </a>
                )}
                {item.excerpt && (
                    <div class="excerpt">{truncateText(item.excerpt, 80)}</div>
                )}
                <a href={item.url} class="continue-btn">Continue Reading</a>
            </li>
        ))}
    </ul>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const postList = document.getElementById('post-list');
        if (!postList) return;

        function truncateTextClient(text: string, maxLength: number = 80): string {
            if (!text) return '';
            const plainText = text.replace(/<[^>]*>/g, '');
            const singleLine = plainText.replace(/\n/g, ' ').replace(/\r/g, ' ').replace(/\t/g, ' ');
            const trimmed = singleLine.replace(/\s+/g, ' ').trim();
            if (trimmed.length <= maxLength) {
                return trimmed;
            }
            return trimmed.substring(0, maxLength) + '...';
        }

        function createPostElement(item: any, type: string) {
            const li = document.createElement('li');
            const typeClass = item.type || type;
            li.className = typeClass;

            li.innerHTML = `
                <a href="${item.url}" class="head-btn">
                    <span class="link-text">
                        ${item.title}
                    </span>
                </a>
                <span class="date">${item.date}</span>
                ${item.thumbnail ? `<img src="${item.thumbnail}" alt="${item.title}のサムネイル" class="thumbnail" />` : ''}
                ${item.excerpt ? `<div class="excerpt">${truncateTextClient(item.excerpt, 80)}</div>` : ''}
                <a href="${item.url}" class="continue-btn">Continue Reading</a>
            `;

            return li;
        }

        function updatePostList(items: any[], type: string) {
            if (!postList) return;
            postList.innerHTML = '';
            items.forEach((item: any) => {
                const postElement = createPostElement(item, type);
                postList.appendChild(postElement);
            });
        }
        window.addEventListener('pageChange', function(e: any) {
            const { currentItems, type } = e.detail;
            if (currentItems && type) {
                updatePostList(currentItems, type);
            }
        });
    });
</script>

<style>
    .head-btn::after {
        content: '';
        display: block;
        position: absolute;
        bottom: 0.2em;
        left: 1%;
        width: 98%;
        height: 2px;
        background: #4B2121;
        transform: scaleX(0);
        transform-origin: center;
        transition: transform 0.3s cubic-bezier(.4,0,.2,1);
    }
    .head-btn:hover::after,
    .head-btn[aria-current="page"]::after {
        transform: scaleX(1);
    }
</style>