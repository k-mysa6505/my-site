---
// 静的ページとして明示的に設定
export const prerender = true;

// マークダウンファイルを正しく読み込む
const allWorkFiles = import.meta.glob("/src/content/works/*.md", {
    eager: true,
});

const works = Object.entries(allWorkFiles).map(([filepath, module]) => {
    const moduleAny = module as any;
    const slug = filepath.split("/").pop()?.replace(".md", "") || "";
    // frontmatterからサムネイル指定を取得
    const thumbnail = '/images/works/' + moduleAny.frontmatter?.thumbnail;
    // frontmatterのexcerptを優先して取得
    let excerpt = moduleAny.frontmatter?.excerpt;
    if (!excerpt) {
        const rawContent = typeof moduleAny.rawContent === 'string' ? moduleAny.rawContent : "";
        const lines = rawContent.split('\n').map((line: string) => line.trim());
        excerpt = lines.find((line: string) => line && !line.startsWith('![') && !line.startsWith('#')) || "";
    }
    return {
        slug,
        filepath,
        frontmatter: moduleAny.frontmatter || {},
        Content: moduleAny.default,
        rawModule: moduleAny, // デバッグ用
        thumbnail, // frontmatterのthumbnail
        excerpt, // 本文1行目
    };
});

// 日付順でソート（新しい順）
const sortedWorks = works.sort((a, b) => {
    const dateA = new Date(a.frontmatter?.date || "1900-01-01");
    const dateB = new Date(b.frontmatter?.date || "1900-01-01");
    return dateB.getTime() - dateA.getTime();
});

/** @typedef {Object} Work
 * @property {string} slug
 * @property {string} filepath
 * @property {Object} frontmatter
 * @property {string} frontmatter.title
 * @property {string} frontmatter.date
 * @property {Function} Content
 */
/** @type {Array<Work>} */
const typedWorks = sortedWorks;
---
<head>
    <title>Works | Kokko's Blog</title>
</head>
<div id="container">
    <h1 class="works-title">Works</h1>
    <p class="works-description">作品や達成したことなどを展示しています．入館料は無料です．</p>
</div>
<ul class="contents">
    {
        typedWorks.length > 0 ? (
            typedWorks.map((work) => {
                const title = work?.frontmatter?.title || "タイトルなし";
                const date = work?.frontmatter?.date || "日付なし";
                const slug = work?.slug || "no-slug";

                return (
                    <li>
                        <a href={`/works/${slug}`} class="head-btn">
                            <span class="link-text">{title}</span>
                        </a>
                        <span class="date">{date}</span>
                        {work.thumbnail && (
                            <img src={work.thumbnail} alt={title + 'のサムネイル'} class="thumbnail" />
                        )}
                        {work.excerpt && (
                            <div class="excerpt">{work.excerpt}</div>
                        )}
                        <a href={`/works/${slug}`} class="continue-btn">Continue Reading</a>
                    </li>
                );
            })
        ) : (
            <li>マークダウンファイルが見つかりません</li>
        )
    }
</ul>

<style>
    #container {
        margin: 40px 100px;
        align-items: center;
    }
    .works-title {
        font-size: 2.6em;
        font-weight: bold;
        margin-bottom: 0.2em;
        letter-spacing: 0.04em;
    }
    .works-description {
        color: #444;
        margin-bottom: 0.5em;
        line-height: 2em;
    }
    .contents {
        list-style: none;
        padding: 0;
    }
    .contents li {
        border-bottom: 1px solid #ccc;
        padding: 0;
        width: 95%;
        margin: auto;
        padding-bottom: 50px;
        margin-bottom: 50px;
    }
    .contents li .thumbnail {
        max-width: 100%;
    }
    .contents .head-btn {
        display: block;
        text-decoration: none;
        padding: 15px 20px;
        background-color: #01b9b6;
        font-weight: 500;
        font-size: xx-large;
        box-sizing: border-box;
        position: relative;
    }
    .contents span {
        display: block;
        width: 100%;
        margin: 10px 0 10px 0;
    }
    .contents .link-text {
        font-weight: 500;
        color: #4B2121;
    }
    .contents .date {
        font-size: 0.65em;
        text-align: center;
    }
    .contents .head-btn::after {
        content: '';
        display: block;
        position: absolute;
        bottom: 0.2em;
        left: 1%;
        width: 98%;
        height: 2px;
        background: #4B2121;
        transform: scaleX(0);
        transform-origin: center;
        transition: transform 0.3s cubic-bezier(.4,0,.2,1);
    }
    .contents .head-btn:hover::after,
    .contents .head-btn[aria-current="page"]::after {
        transform: scaleX(1);
    }
    .thumbnail {
        min-width: 80%;
        max-width: 100%;
        max-height: 65vh;
        margin: auto;
        display: block;
        object-fit: cover;
        border-radius: 4px 4px 0 0;
        margin-bottom: 0;
    }
    .contents .excerpt {
        color: #666;
        margin: 15px 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .continue-btn {
        display: inline-block;
        margin: 10px auto 0 auto;
        padding: 20px 24px;
        background: #01b9b6;
        color: #ddd;
        border-radius: 4px;
        text-decoration: none;
        font-size: 1em;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: background 0.2s, color 0.2s;
        text-align: center;
    }
    .continue-btn:hover {
        background: #00d2ce;
        color: #ddd;
    }
</style>